/*
 * Analysis Operations On The Run: Beyond Static Feature Model Analysis in Constraint-based Recommenders
 *
 * Copyright (c) 2023 AIG team, Institute for Software Technology, Graz University of Technology, Austria
 *
 * Contact: http://ase.ist.tugraz.at/ASE/
 */

// Generated from /Users/manleviet/Development/AIG/AO4FMA/AO4FMA/src/main/java/at/tugraz/ist/ase/ao4fma/model/translator/core/MZN2Choco.g4 by ANTLR 4.12.0
package at.tugraz.ist.ase.ao4fma.model.translator.core;


import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.LexerATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class MZN2ChocoLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.12.0", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, VAR=9, 
		ENUM=10, CONSTRAINT=11, CM=12, SC=13, CL=14, LP=15, RP=16, MUL=17, DIV=18, 
		ADD=19, SUB=20, AND=21, OR=22, EQU=23, NEQ=24, GRT=25, LES=26, GRE=27, 
		LEE=28, IMP=29, IDENTIFIER=30, COMMENT=31, WS=32, INT_CONST=33;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "VAR", 
			"ENUM", "CONSTRAINT", "CM", "SC", "CL", "LP", "RP", "MUL", "DIV", "ADD", 
			"SUB", "AND", "OR", "EQU", "NEQ", "GRT", "LES", "GRE", "LEE", "IMP", 
			"IDENTIFIER", "COMMENT", "WS", "INT_CONST", "NEGATIVE", "NUMBER", "LETTER", 
			"DIGIT"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'::\"'", "'\"'", "'=='", "'<->'", "'['", "']'", "'{'", "'}'", 
			"'var'", "'enum'", "'constraint'", "','", "';'", "':'", "'('", "')'", 
			"'*'", "'/'", "'+'", "'-'", "'/\\'", "'\\/'", "'='", "'!='", "'>'", "'<'", 
			"'>='", "'<='", "'->'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, "VAR", "ENUM", 
			"CONSTRAINT", "CM", "SC", "CL", "LP", "RP", "MUL", "DIV", "ADD", "SUB", 
			"AND", "OR", "EQU", "NEQ", "GRT", "LES", "GRE", "LEE", "IMP", "IDENTIFIER", 
			"COMMENT", "WS", "INT_CONST"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public MZN2ChocoLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "MZN2Choco.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000!\u00cf\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0004"+
		"\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0007"+
		"\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001"+
		"\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u0010"+
		"\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0013"+
		"\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017"+
		"\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001d\u0001\u001d\u0003\u001d\u00a1\b\u001d\u0001\u001d"+
		"\u0001\u001d\u0005\u001d\u00a5\b\u001d\n\u001d\f\u001d\u00a8\t\u001d\u0001"+
		"\u001e\u0001\u001e\u0005\u001e\u00ac\b\u001e\n\u001e\f\u001e\u00af\t\u001e"+
		"\u0001\u001e\u0003\u001e\u00b2\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001 \u0001"+
		" \u0001 \u0001!\u0003!\u00c0\b!\u0001\"\u0001\"\u0001\"\u0005\"\u00c5"+
		"\b\"\n\"\f\"\u00c8\t\"\u0003\"\u00ca\b\"\u0001#\u0001#\u0001$\u0001$\u0000"+
		"\u0000%\u0001\u0001\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b"+
		"\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b\u0017\f\u0019\r\u001b"+
		"\u000e\u001d\u000f\u001f\u0010!\u0011#\u0012%\u0013\'\u0014)\u0015+\u0016"+
		"-\u0017/\u00181\u00193\u001a5\u001b7\u001c9\u001d;\u001e=\u001f? A!C\u0000"+
		"E\u0000G\u0000I\u0000\u0001\u0000\u0005\u0002\u0000\n\n\r\r\u0003\u0000"+
		"\t\n\r\r  \u0001\u000019\u0003\u0000AZ__az\u0001\u000009\u00d2\u0000\u0001"+
		"\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0005"+
		"\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001"+
		"\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000"+
		"\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011\u0001\u0000"+
		"\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015\u0001\u0000"+
		"\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019\u0001\u0000"+
		"\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d\u0001\u0000"+
		"\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001\u0000\u0000"+
		"\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000\u0000\u0000"+
		"\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000\u0000+\u0001"+
		"\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000/\u0001\u0000\u0000"+
		"\u0000\u00001\u0001\u0000\u0000\u0000\u00003\u0001\u0000\u0000\u0000\u0000"+
		"5\u0001\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0000\u00009\u0001"+
		"\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000=\u0001\u0000\u0000"+
		"\u0000\u0000?\u0001\u0000\u0000\u0000\u0000A\u0001\u0000\u0000\u0000\u0001"+
		"K\u0001\u0000\u0000\u0000\u0003O\u0001\u0000\u0000\u0000\u0005Q\u0001"+
		"\u0000\u0000\u0000\u0007T\u0001\u0000\u0000\u0000\tX\u0001\u0000\u0000"+
		"\u0000\u000bZ\u0001\u0000\u0000\u0000\r\\\u0001\u0000\u0000\u0000\u000f"+
		"^\u0001\u0000\u0000\u0000\u0011`\u0001\u0000\u0000\u0000\u0013d\u0001"+
		"\u0000\u0000\u0000\u0015i\u0001\u0000\u0000\u0000\u0017t\u0001\u0000\u0000"+
		"\u0000\u0019v\u0001\u0000\u0000\u0000\u001bx\u0001\u0000\u0000\u0000\u001d"+
		"z\u0001\u0000\u0000\u0000\u001f|\u0001\u0000\u0000\u0000!~\u0001\u0000"+
		"\u0000\u0000#\u0080\u0001\u0000\u0000\u0000%\u0082\u0001\u0000\u0000\u0000"+
		"\'\u0084\u0001\u0000\u0000\u0000)\u0086\u0001\u0000\u0000\u0000+\u0089"+
		"\u0001\u0000\u0000\u0000-\u008c\u0001\u0000\u0000\u0000/\u008e\u0001\u0000"+
		"\u0000\u00001\u0091\u0001\u0000\u0000\u00003\u0093\u0001\u0000\u0000\u0000"+
		"5\u0095\u0001\u0000\u0000\u00007\u0098\u0001\u0000\u0000\u00009\u009b"+
		"\u0001\u0000\u0000\u0000;\u00a0\u0001\u0000\u0000\u0000=\u00a9\u0001\u0000"+
		"\u0000\u0000?\u00b7\u0001\u0000\u0000\u0000A\u00bb\u0001\u0000\u0000\u0000"+
		"C\u00bf\u0001\u0000\u0000\u0000E\u00c9\u0001\u0000\u0000\u0000G\u00cb"+
		"\u0001\u0000\u0000\u0000I\u00cd\u0001\u0000\u0000\u0000KL\u0005:\u0000"+
		"\u0000LM\u0005:\u0000\u0000MN\u0005\"\u0000\u0000N\u0002\u0001\u0000\u0000"+
		"\u0000OP\u0005\"\u0000\u0000P\u0004\u0001\u0000\u0000\u0000QR\u0005=\u0000"+
		"\u0000RS\u0005=\u0000\u0000S\u0006\u0001\u0000\u0000\u0000TU\u0005<\u0000"+
		"\u0000UV\u0005-\u0000\u0000VW\u0005>\u0000\u0000W\b\u0001\u0000\u0000"+
		"\u0000XY\u0005[\u0000\u0000Y\n\u0001\u0000\u0000\u0000Z[\u0005]\u0000"+
		"\u0000[\f\u0001\u0000\u0000\u0000\\]\u0005{\u0000\u0000]\u000e\u0001\u0000"+
		"\u0000\u0000^_\u0005}\u0000\u0000_\u0010\u0001\u0000\u0000\u0000`a\u0005"+
		"v\u0000\u0000ab\u0005a\u0000\u0000bc\u0005r\u0000\u0000c\u0012\u0001\u0000"+
		"\u0000\u0000de\u0005e\u0000\u0000ef\u0005n\u0000\u0000fg\u0005u\u0000"+
		"\u0000gh\u0005m\u0000\u0000h\u0014\u0001\u0000\u0000\u0000ij\u0005c\u0000"+
		"\u0000jk\u0005o\u0000\u0000kl\u0005n\u0000\u0000lm\u0005s\u0000\u0000"+
		"mn\u0005t\u0000\u0000no\u0005r\u0000\u0000op\u0005a\u0000\u0000pq\u0005"+
		"i\u0000\u0000qr\u0005n\u0000\u0000rs\u0005t\u0000\u0000s\u0016\u0001\u0000"+
		"\u0000\u0000tu\u0005,\u0000\u0000u\u0018\u0001\u0000\u0000\u0000vw\u0005"+
		";\u0000\u0000w\u001a\u0001\u0000\u0000\u0000xy\u0005:\u0000\u0000y\u001c"+
		"\u0001\u0000\u0000\u0000z{\u0005(\u0000\u0000{\u001e\u0001\u0000\u0000"+
		"\u0000|}\u0005)\u0000\u0000} \u0001\u0000\u0000\u0000~\u007f\u0005*\u0000"+
		"\u0000\u007f\"\u0001\u0000\u0000\u0000\u0080\u0081\u0005/\u0000\u0000"+
		"\u0081$\u0001\u0000\u0000\u0000\u0082\u0083\u0005+\u0000\u0000\u0083&"+
		"\u0001\u0000\u0000\u0000\u0084\u0085\u0005-\u0000\u0000\u0085(\u0001\u0000"+
		"\u0000\u0000\u0086\u0087\u0005/\u0000\u0000\u0087\u0088\u0005\\\u0000"+
		"\u0000\u0088*\u0001\u0000\u0000\u0000\u0089\u008a\u0005\\\u0000\u0000"+
		"\u008a\u008b\u0005/\u0000\u0000\u008b,\u0001\u0000\u0000\u0000\u008c\u008d"+
		"\u0005=\u0000\u0000\u008d.\u0001\u0000\u0000\u0000\u008e\u008f\u0005!"+
		"\u0000\u0000\u008f\u0090\u0005=\u0000\u0000\u00900\u0001\u0000\u0000\u0000"+
		"\u0091\u0092\u0005>\u0000\u0000\u00922\u0001\u0000\u0000\u0000\u0093\u0094"+
		"\u0005<\u0000\u0000\u00944\u0001\u0000\u0000\u0000\u0095\u0096\u0005>"+
		"\u0000\u0000\u0096\u0097\u0005=\u0000\u0000\u00976\u0001\u0000\u0000\u0000"+
		"\u0098\u0099\u0005<\u0000\u0000\u0099\u009a\u0005=\u0000\u0000\u009a8"+
		"\u0001\u0000\u0000\u0000\u009b\u009c\u0005-\u0000\u0000\u009c\u009d\u0005"+
		">\u0000\u0000\u009d:\u0001\u0000\u0000\u0000\u009e\u00a1\u0003G#\u0000"+
		"\u009f\u00a1\u0003I$\u0000\u00a0\u009e\u0001\u0000\u0000\u0000\u00a0\u009f"+
		"\u0001\u0000\u0000\u0000\u00a1\u00a6\u0001\u0000\u0000\u0000\u00a2\u00a5"+
		"\u0003G#\u0000\u00a3\u00a5\u0003I$\u0000\u00a4\u00a2\u0001\u0000\u0000"+
		"\u0000\u00a4\u00a3\u0001\u0000\u0000\u0000\u00a5\u00a8\u0001\u0000\u0000"+
		"\u0000\u00a6\u00a4\u0001\u0000\u0000\u0000\u00a6\u00a7\u0001\u0000\u0000"+
		"\u0000\u00a7<\u0001\u0000\u0000\u0000\u00a8\u00a6\u0001\u0000\u0000\u0000"+
		"\u00a9\u00ad\u0005%\u0000\u0000\u00aa\u00ac\b\u0000\u0000\u0000\u00ab"+
		"\u00aa\u0001\u0000\u0000\u0000\u00ac\u00af\u0001\u0000\u0000\u0000\u00ad"+
		"\u00ab\u0001\u0000\u0000\u0000\u00ad\u00ae\u0001\u0000\u0000\u0000\u00ae"+
		"\u00b1\u0001\u0000\u0000\u0000\u00af\u00ad\u0001\u0000\u0000\u0000\u00b0"+
		"\u00b2\u0005\r\u0000\u0000\u00b1\u00b0\u0001\u0000\u0000\u0000\u00b1\u00b2"+
		"\u0001\u0000\u0000\u0000\u00b2\u00b3\u0001\u0000\u0000\u0000\u00b3\u00b4"+
		"\u0005\n\u0000\u0000\u00b4\u00b5\u0001\u0000\u0000\u0000\u00b5\u00b6\u0006"+
		"\u001e\u0000\u0000\u00b6>\u0001\u0000\u0000\u0000\u00b7\u00b8\u0007\u0001"+
		"\u0000\u0000\u00b8\u00b9\u0001\u0000\u0000\u0000\u00b9\u00ba\u0006\u001f"+
		"\u0000\u0000\u00ba@\u0001\u0000\u0000\u0000\u00bb\u00bc\u0003C!\u0000"+
		"\u00bc\u00bd\u0003E\"\u0000\u00bdB\u0001\u0000\u0000\u0000\u00be\u00c0"+
		"\u0005-\u0000\u0000\u00bf\u00be\u0001\u0000\u0000\u0000\u00bf\u00c0\u0001"+
		"\u0000\u0000\u0000\u00c0D\u0001\u0000\u0000\u0000\u00c1\u00ca\u00050\u0000"+
		"\u0000\u00c2\u00c6\u0007\u0002\u0000\u0000\u00c3\u00c5\u0003I$\u0000\u00c4"+
		"\u00c3\u0001\u0000\u0000\u0000\u00c5\u00c8\u0001\u0000\u0000\u0000\u00c6"+
		"\u00c4\u0001\u0000\u0000\u0000\u00c6\u00c7\u0001\u0000\u0000\u0000\u00c7"+
		"\u00ca\u0001\u0000\u0000\u0000\u00c8\u00c6\u0001\u0000\u0000\u0000\u00c9"+
		"\u00c1\u0001\u0000\u0000\u0000\u00c9\u00c2\u0001\u0000\u0000\u0000\u00ca"+
		"F\u0001\u0000\u0000\u0000\u00cb\u00cc\u0007\u0003\u0000\u0000\u00ccH\u0001"+
		"\u0000\u0000\u0000\u00cd\u00ce\u0007\u0004\u0000\u0000\u00ceJ\u0001\u0000"+
		"\u0000\u0000\t\u0000\u00a0\u00a4\u00a6\u00ad\u00b1\u00bf\u00c6\u00c9\u0001"+
		"\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}